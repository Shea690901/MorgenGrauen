AddDetail()

FUNKTION:
	void AddDetail(mixed*keys,mixed desc);

DEFINIERT IN:
	/std/thing/description.c

ARGUMENTE:
	keys
	  String oder Array von Strings mit den Namen der Details.
	desc
	  String, Mapping oder Closure zur Beschreibung der Details.

BESCHREIBUNG:
	Die Beschreibung der Details <keys> wird gesetzt. Wie die Details
	bei der Untersuchung aussehen, haengt im wesentlichen vom Typ der
	Beschreibung <desc> ab:
	  <desc> ist ein String.
	    Beim Untersuchen wird dieser String zurueckgegeben.
	  <desc> ist ein Mapping.
	    Das Mapping muss folgenden Aufbau haben:

	      ([0:"Defaulttext","rasse1":"r1text",...]).

	    Falls fuer die Rasse des das Detail untersuchenden Spielers ein
	    Eintrag im Mapping existiert, wird der entsprechende Text
	    zurueckgegeben, ansonsten der Defaulttext. Auf diese Weise sind
	    rassenabhaengige Details moeglich. Siehe auch die Beispiele.
	  <desc> ist eine Closure.
	    In diesem Fall wird die Closure ausgefuehrt und das Ergebnis
	    zurueckgegeben. Die Closure bekommt dabei den Namen des Details
	    als Parameter uebergeben.
	Fuer Details koennen Forscherpunkte eingetragen werden.

RUeCKGABEWERT:
	keiner

BEISPIELE:
	Ein schlichtes Detail:

	  AddDetail(({"sofa","couch"}),"Eine kleine Couch.\n");

	Laengere Details sollten hierbei nicht per Hand umgebrochen werden,
	sondern man kann hierzu die Funktion break_string() nutzen:

	  AddDetail("detail",break_string(
	    "Du wolltest es ja nicht anders, jetzt musst Du Dir dieses "
	   +"fuerchterlich lange Detail durchlesen!!!",78));

	Noetige Zeilenumbrueche bei Zeilenlaengen groesser 77 werden so
	automatisch generiert.
	Ein rassenabhaengiges Detail:

	  AddDetail(({"bett","bettchen"}),
	    ([0      :"Eine kleines Bett.\n", // Der Defaulttext
	      "zwerg":                        // Die Rasse klein schreiben
                 "Das Bett laedt geradezu zu einem Nickerchen ein.\n"]));

	Und nun ein Detail mit Closure:

	  int hebel_betaetigt;
	  ...
	  string hebel(string str); // Prototyping notwendig
	  ...
	  AddDetail(({"hebel","schalter"}),#'hebel);
	  ...
	  string hebel(string key)
	  { if(hebel_betaetigt)
	      return "Der "+capitalize(key)+" steht auf EIN.\n";
	    else
	      return "Der "+capitalize(key)+" steht auf AUS.\n";
	  }

	Man erhaelt verschiedene Ergebnisse beim Untersuchen, je nachdem
	ob das Flag hebel_betaetigt gesetzt ist oder nicht.

BEMERKUNG:
	Wie man sieht, ist die letzte Art ein verkappter Aufruf von
	AddSpecialDetail().

SIEHE AUCH:
	RemoveDetail(), P_DETAILS, AddSpecialDetail(), AddReadDetail(),
	AddSounds(), AddSmells(), GetDetail()

----------------------------------------------------------------------------
Last modified: Tue May  1 17:10:27 2001 by Patryn
