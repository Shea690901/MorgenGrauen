AddToMenu()

FUNKTION:
	varargs string AddToMenu(string  menuetext,
	                         mixed   ids,
	                         mapping minfo,
	                         mixed   rate,
	                         mixed   msg,
	                         mixed   refresh,
	                         mixed   delay,
	                         mixed   d_msg);

DEFINIERT IN:
	/std/pub.c

ARGUMENTE:
	menuetext
	  Der Text steht als kurze Beschreibung im Menue.
	ids
	  String oder Array von Strings, mit denen sich die Speise bzw. das
	  Getraenk beim Bestellen ansprechen laesst.
	minfo
	  Mapping mit Eintraegen fuer:
 	    P_HP      (HP-Heilung in Punkten),
	    P_SP      (SP-Heilung in Punkten),
	    P_FOOD    (Saettigungsgrad der Speise),
	    P_DRINK   (Saettigungsgrad des Getraenks),
	    P_ALCOHOL (Alkoholgehalt des Getraenks),
	    P_VALUE   (Preis der Speise bzw. des Getraenks).
	rate
	  Heilrate in Punkten pro HeartBeat.
	msg
	  Meldung beim Essen:
	  a) Closure (wird mit 'funcall(msg,zahler,empfaenger)' ausgewertet)
	  b) String (wie Closure: 'call_other(this_object...)')
	  c) Array mit 2 Strings: (1) fuer Empfaenger, (2) fuer Andere.
	refresh
          Mapping mit Eintraegen fuer:
            PR_USER (Kontingent fuer einzelnen Spieler)
            PR_ALL  (Zusatzkontingent fuer alle)
          Einem Key muessen dabei zwei Werte zugeordnet werden:
          Der Erste gibt die Hoehe des Kontingents an, der Zweite legt
          fest, alle wieviel reset()s das Kontingent wieder aufgefuellt
          wird.
	delay
	  Zahl der Sekunden, um die verzoegert die Heilung eintritt,
	  z.B. weil das Essen erst zubereitet werden muss.
	d_msg
	  Meldung beim Bestellen, falls die Heilung verzoegert wird
	  (wie <msg>: Meldung beim Essen).

RUECKGABEWERT:
	Rueckgabewert ist ein String "menuentry%d", wobei %d eine Nummer
	ist, die darueber Auskunft gibt, der wievielte Eintrag in die
	interne Karte der Kneipe diese Speise bzw. dieses Getraenk
	darstellt. Im Prinzip handelt es sich bei dem String um einen Key
	fuer ein Mapping, in dem die Speisen bzw. Getraenke gespeichert
	sind.

BESCHREIBUNG:
	Mit dieser Funktion kann man Speisen bzw. Getraenke in die
	Karte einfuegen. Weitere Infos sind in Arbeit.

BEMERKUNGEN:
	Die aelteren Funktionen 'AddDrink' bzw. 'AddFood' werden mithilfe
	dieser maechtigeren Funktion emuliert und koennen somit auch
	weiterhin genutzt werden. Bei 'AddDrink' wird hierbei jedoch der
	Heilwert des Getraenkes aus Balancegruenden halbiert.

BEISPIEL:

        inherit <pub.h>

        create()
        {
        ...

        AddToMenu("'Opa's Drachenkeule'",({"drachenkeule","keule"}),
        ([P_HP:63,P_SP:63,P_FOOD:9,P_VALUE:528]), 5,
        ({"Du isst die Keule mit einem schlechten Gewissen.",
          "&& isst die Keule mit einem schlechten Gewissen."}),
        ([ PR_USER : 4; 1 , PR_ALL : 20; 3 ]), 9,
        ({"Der unsichtbare Kneipier schneidet einem Rentner ein grosses "
          "Stueck aus dessen Keule und bereitet sie Dir zu. Komisch, muss "
          "wohl ein Tippfehler auf der Karte gewesen sein.",
          "Der unsichtbare Kneipier schneidet einem hilflosen Opa ein "
          "Stueck aus dessen Keule und braet diese fuer &&."}) );

        }


        1) Name der Speise (des Getraenks) auf der Karte (bei menue).

           AddToMenu("'Opa's Drachenkeule'",     

        2) ids mit denen sich bestellen laesst. 

           ({"drachen","drachenkeule","keule"}),

        3) Heilung fuer HP und SP, Saettigung (P_FOOD oder P_DRINK,
           P_ALCOHOL nach Belieben setzen, P_VALUE. HP und SP muessen nicht
           immer gleich sein, Speisen und Getraenke die nur eines von beiden 
           heilen sind auch moeglich).

           ([P_HP:63,P_SP:63,P_FOOD:9,P_VALUE:528]),
        
        4) Heilung pro Heartbeat (in diesem Beispiel je 5 SP/HP).  
    
           5,

        5) Meldungen fuer Spieler und Umstehende die bei Genuss ausgege-
           ben werden (also NICHT der Bestell-Text).

           ({"Du isst die Keule mit einem schlechten Gewissen.",
             "&& isst die Keule mit einem schlechten Gewissen."}),

           Verfuegbare Platzhalter sind (pl = this_player()):

           &&  - pl->name(WER,2)
           &1& - pl->name(WER,2)
           &2& - pl->name(WESSEN,2)
           &3& - pl->name(WEM,2)
           &4& - pl->name(WEN,2)
           &1# - capitalize(pl->name(WER,2))
           &2# - capitalize(pl->name(WESSEN,2))
           &3# - capitalize(pl->name(WEM,2))
           &4# - capitalize(pl->name(WEN,2))
           &!  - pl->QueryPronoun(WER)
           &5& - pl->QueryPronoun(WE);
           &6& - pl->QueryPronoun(WESSEN)
           &7& - pl->QueryPronoun(WEM)
           &8& - pl->QueryPronoun(WEN)
           &5# - capitalize(pl->QueryPronoun(WER))
           &6# - capitalize(pl->QueryPronoun(WESSEN))
           &7# - capitalize(pl->QueryPronoun(WEM))
           &8# - capitalize(pl->QueryPronoun(WEN))

           Wenn statt eines String-Arrays ein String oder eine Closure
           uebergeben werden, ruft die Kneipe diese bei einer Bestellung
           wie folgt auf:
           
           call_other(this_object(), msg, zahler, empfaenger, ident, minfo);
           funcall(msg, zahler, empfaenger, ident, minfo);

           Die so aufgerufene Funktion bekommt Kunden und Empfaenger als
           Objekte, ident als String und minfo als Mapping uebergeben:

           void msg( object zahler, object empfaenger, 
                     string ident, mapping minfo);

           WICHTIG: Die Rueckgabewerte der Funktion werden nicht ausgewertet.
           Jeder, der anstatt einer Meldung einen Funktionsaufruf programmiert,
           muss fuer die Ausgabe der Meldungen selbst sorgen.
           
           Der zusaetzliche Parameter ident ist hierbei ein String von der Art 
           "menuentry%d", wobei %d ein Zaehler ist, der bei 0 startet und
           mit jedem Aufruf von AddToMenu() um 1 erhoeht wird. D.h. der
           Eintrag, der dem Menue zuerst hinzugefuegt wird, erhaelt
           ident="menuentry0", der zweite "menuentry1" usw.
           Der Parameter minfo entspricht den Daten, die als dritter Parameter
           an AddToMenu() uebergeben wurden.

        6) Die Speise ist in ihrer Anzahl begrenzt. Fuer jeden Spieler
           sind 4 Keulen pro reset() da. Ausserdem gibt es noch einen
           "Notvorrat" von 20 Keulen, der alle 3 reset()s aufgefuellt
           wird. Aus diesem (so noch vorhanden) werden die Spieler
           versorgt, wenn ihr "persoenlicher Vorrat" aufgebraucht ist.

           ([ PR_USER : 4; 1 , PR_ALL : 20; 3 ]),
           
           Wenn man keine reset-abhaengigen Speisen haben moechte, laesst
           man dieses Mapping einfach leer.

           ACHTUNG: bei Benutzung des Mappings muss <pub.h> included werden!

        7) Die Zahl ist die Wartezeit in Sekunden, die der Wirt z.B. fuer
           die Zubereitung und Auslieferung an den Spieler braucht.

           9,
         
        8) Letztendlich die Meldungen an Spieler und Umstehende die bei Be-
           stellung (hier 'kaufe keule') ausgegeben werden.

           ({"Der unsichtbare Kneipier schneidet einem Rentner ein grosses "
           "Stueck aus dessen Keule und bereitet sie Dir zu. Komisch, muss "
           "wohl ein Tippfehler auf der Karte gewesen sein.",
           "Der unsichtbare Kneipier schneidet einem hilflosen Opa ein "
           "Stueck aus dessen Keule und braet diese fuer &&."}));

        9) Fuer das Testen der Kneipe gibt es unter /obj/tools das pubtool.
           Mit 'pubinit' lassen sich die Speisen und Getraenke durch-
           checken, spuckt es ein FAIL aus, so wird die entsprechende Speise
           (oder Getraenk) NICHT an Spieler verkauft, hier muss also noch 
           an den Werten geschraubt werden.

SIEHE AUCH:
	AddFood(), AddDrink(), /sys/pub.h
	RemoveFromMenu()
----------------------------------------------------------------------------
Last modified: Mon, 30. Jul 2007, 21:49 by Arathorn
