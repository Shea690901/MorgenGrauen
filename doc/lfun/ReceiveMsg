ReceiveMsg()

public varargs int ReceiveMsg(string msg, int msg_typ, string msg_action,
                              string msg_prefix, mixed origin)

DEFINIERT IN:
    /std/living/comm.c
    /std/npc/comm.c
    /std/player/comm.c

ARGUMENTE:
    <msg>
      String mit der uebermittelten Nachricht.
      Im Normalfall: nicht umgebrochen, weil ReceiveMessage() das erledigt.
    <msg_typ>
      Binaere Flags von Nachrichtentypen und -flags:
      MT_UNKNOWN       unspez. Nachrichtentyp (nicht verwenden). Es wird
                       versucht, aufgrund <msg_action> den Typ zu erraten.
      MT_LOOK          alles, was man sieht
      MT_LISTEN        alles, was man hoert
      MT_FEEL          alles, was man fuehlt
      MT_TASTE         alles, was man schmeckt
      MT_SMELL         alles, was man riecht
      MT_MAGIC         alle sonstigen (uebersinnlichen) Wahrnehmungen
      MT_NOTIFICATION  Statusmeldungen, Kommandobestaetigungen
      MT_COMM          alle OOC-Kommunikation, d.h. nicht durch o.g. Sinne
                       abgedeckt.
      MT_FAR           alles, was aus der Ferne / einem anderen Raum kommt.
                       muss mit min. einem anderen Typ kombiniert werden
      MT_DEBUG         Debugmeldungen, sehen nur Magier im Magiermodus
      MT_NEWS          Mails & MPA

      MSG_DONT_BUFFER  Nachricht darf nicht im Kobold gespeichert werden
      MSG_DONT_STORE   Nachricht darf nicht in die Comm-History
      MSG_DONT_WRAP    Nachricht nicht per break_string umbrechen
      MSG_DONT_IGNORE  Nachricht kann nicht ignoriert werden

      MSG_BS_LEAVE_LFS    wie BS_LEAVE_MY_LFS fuer break_string()
      MSG_BS_SINGLE_SPACE wie BS_SINGLE_SPACE fuer break_string()
      MSG_BS_BLOCK        wie BS_BLOCK fuer break_string()
      MSG_BS_NO_PARINDENT wie BS_NO_PARINDENT fuer break_string()
      MSG_BS_INDENT_ONCE  wie BS_INDENT_ONCE fuer break_string()
      MSG_BS_PREP_INDENT  wie BS_PREPEND_INDENT fuer break_string()

    <msg_action> (optional)
      Entweder das Kommandoverb der die Meldung ausloesenden Aktion oder eine
      der folgenden vordefinierten Konstanten, welche jeweils verschiedene
      Verben umfassen koennen oder gar nicht per Verb fassbar sind.
      (Default: query_verb()).
      Wird hauptsaechlich fuer die Ignoriere-Pruefung verwendet. Denkbar ist
      aber auch die Ausgabe verschiedener Aktionen in verschiedenen Farben,
      das Uebermitteln eines Piepstons etc.
      MA_UNKNOWN          Unspez. Aktion. Es wird der Default query_verb()
                          benutzt bzw. versucht, die Aktion zu erraten.
      MA_PUT              Jemand legt etwas hin und gibt jemanden etwas
      MA_TAKE             Jemand nimmt etwas
      MA_MOVE_IN          Jemand betritt den Raum
      MA_MOVE_OUT         Jemand verlaesst den Raum
      MA_MOVE             Jemand bewegt sich 
      MA_FIGHT            Jemand kaempft
      MA_WIELD            Jemand zueckt eine Waffe
      MA_UNWIELD          Jemand steckt eine Waffe weg
      MA_WEAR             Jemand zieht etwas an
      MA_UNWEAR           Jemand zieht etwas aus
      MA_EAT              Jemand isst etwas
      MA_DRINK            Jemand trinkt etwas
      MA_SPELL            Jemand wirkt einen Spell
      MA_LOOK             Jemand sieht etwas an, untersucht etwas
      MA_LISTEN           Jemand horcht oder lauscht an etwas
      MA_FEEL             Jemand betastet etwas
      MA_SMELL            Jemand schnueffelt herum
      MA_SENSE            Jemand macht eine uebersinnliche Wahrnehmung
      MA_READ             Jemand liest etwas
      MA_USE              Jemand benutzt etwas
      MA_SAY              Jemand sagt etwas
      MA_REMOVE           Etwas verschwindet
      MA_CHAT             Chatkrams (z.B. teile-mit, Teamkampfchat)
      MA_CHANNEL          Ebenen
      MA_EMOTE            (r)Emotes, Soulverben (remotes mit Typ MT_COMM|MT_FAR)
      MA_SHOUT            Rufen (nicht: shout()!)

    <msg_prefix> (optional)
      String, welcher ggf. in einem break_string() als indent verwendet werden
      soll.
      Default: 0 (kein Indent)

    <origin> (<object>) (optional)
      Das die Meldung ausloesende Objekt. Primaer fuer die Ignorierepruefung
      verwendet. Die Pruefung basiert auf origin->query_real_name(), falls
      origin ein Spieler ist und origin->Name(RAW) sonst.
      Default: previous_object().

BESCHREIBUNG:
    ReceiveMsg() laesst dem Objekte eine textuelle Nachricht zukommen. Im
    Falle von Spielern wird diese schlussendlich per tell_object() an den
    Client des Spielers uebertragen. Im Falle von NPCs wird
    catch_tell/catch_msg aufgerufen. (Empfehlung ist aber, die Nachricht im
    ReceiveMsg() des NPC zu verarbeiten.) Alle anderen Objekte machen
    standardmaessig nichts mit der Meldung.

    Im Falle von Spielern wird Nachricht vor Ausgabe noch weiterverarbeitet:
    1) Pruefung, ob sie wahrgenommen werden kann (z.B. darf man bei MT_LISTEN
       nicht taub, bei MT_LOOK nicht blind sein).
    2) Wird die Aktion oder der Urheber ignoriert?
    3) Speicherung in der tmhist, wenn der Typ MT_COMM ist.
    4) Bei Bedarf Speicherung im Kobold statt Ausgabe, wenn Typ MT_COMM ist
       und der Spieler im Editor.
    5) Umbrechen des Textes unter Beruecksichtung des uebergebenen idents und
       der uebergebenen Flags fuer break_string(). Weiterhin wird das
       P_PREPEND_BS des Spielers dabei beruecksichtigt.

RUeCKGABEWERT:
    > 0 fuer Erfolg, < 0 fuer Misserfolg, s.u.
    MSG_DELIVERED    bei erfolgreicher Zustellung
    MSG_BUFFERED     bei Zwischenspeicherung durch den Kobold

    MSG_FAILED       nicht naeher spezifizierter Fehler bei Zustellung
    MSG_IGNORED      Nachricht wurde ignoriert (Absender, origin)
    MSG_VERB_IGN     Nachricht wurde ignoriert (Kommandoverb, msg_action)
    MSG_MUD_IGN      Absendendes Mud wurde ignoriert.
    MSG_SENSE_BLOCK  Passende Sinne des Empfaenger sind blockiert (z.B.
                     blind, taub)
    MSG_BUFFER_FULL  Kobold kann sich nichts mehr merken

BEMERKUNGEN:
    Fuer saemtliche Alternativmeldungen im Falle einer nicht erfolgreich
    zugestellten Nachricht ist der Aufrufer von ReceiveMessage()
    verantwortlich.
    Ruft zwecks Abwaertskompatibilitaet catch_tell() auf.
    Damit man als Magier nur ReceiveMessage() und nicht auch catch_tell()
    beachten kann, muessten write/say/tell_object/tell_room sefuns sein.

