This is some information on mudlib 3.0 I got in response to a question
about how mudlib 3.0 will look like and what you wizards will have to
care about to make porting to mudlib 3.0 easier.

------
To help you out in the mean time, here are a little summary on mudlib 3.0:

	- There will be a strict line between the standard mudlib3 and
	  code specific to Genesis. The distributed version will be very
	  'bare bone'. Although the 'Genesis domain' might be distributed as
	  example.

	- The directory structure will change:
	     * No /obj /room
	     * Only character save files under /players
	     * All user files under /w/wizname and /d/Domainname
	     * All 'meant to inherit' files under /std (weapon, armour, room)

	- Wizards and domains will be able to make their own 'player'-files.
	  For variants of races, guilds, occupation etc.

	- Players must be introduced to each other to know eachothers name
	- Light, weight and volume is solved with a new 'property' system.
	- Experience is translated directly to stat-values, depending on
	  a set of 'learning' factors settable by the player. Combat and
	  normal experience is kept apart. This abolishes the specific demand
	  to solve a certain number of quests.
	- Teams are introduced, players can team up around a leader and move
	  by following the leader and share exp gained.
	- Spells are dynamically added and removed from the players.
	- Money is solved with 'heap' objects. Coins will have weight
	  and volume.
	- A global geography is introduced, a map onto which domains can place
	  themselves. Movement on the 'bare' map is supported.

This summary is not complete, you'll have to take a look at the alfa release.
My best advice for builders in 2.4.5 versions:

	- The major changes in 3.0 is in the standard files such as
	  weapon, armour, room, monster etc.
	  One example is long() which in 3.0 will return a string not print it.
	  As long as you use as little special features as possible from these,
	  your code will take little work to change to 3.0. There might be
	  new and more effective ways of doing things in 3.0 but as the LPC
	  language will remain very much the same your things will probably
	  work.
	- One exception is the efuns say and tell_room, because of the
	  fact that messages must be reciever dependant (people met/nonmet)
	  a special strategy will be used in 3.0
	- The security system in 3.0 will in most normal creations be
	  invisible, the only exceptions being wizard tools and rooms not
	  inherited from the /std/room.c (i.e. rooms written from scratch).


Johan


