I'm collecting some problems arising from the 3.0 server here:

#define: A second #define that redefines another #define of the same name
must not be used in 3.0. The built-in preprocessor gives an error and
the loading of the object is terminated. Examples where this problem might
occur are the std.h file (redefining the macros ONE_EXIT, EXTRA_RESET or
similar without using #undef EXTRA_RESET before #define EXTRA_RESET).
So, if you must redifine something, use the pair #undef NAME,
#define NAME <something>

function redeclarations: If you have two functions with the same name in 
your program, the program won't be loaded.

redeclaring global variables: Several wizards created troll monsters who
get then /obj/money. The code is something like this:
  money = clone_object("/obj/money");
  move_object(money,troll);
  money->add_money(amount);
Since the variable "money" is already defined in /obj/living.c which is
inherited by monster.c this leads to problems in 3.0. Use another name,
e.g. mon instead of money. Thanx to Xio for locating the problem.

I don't know if this is really a problem of 3.0, but in connection with 3.0
this problem keeps castles from beeing loaded at the start.
find_object("path") returns ZERO if the room or object is not loaded. Thus
you should NOT use constructs like this:
  room = find_object("madonna/bedroom");
  if (!present("madonna",room)) {
     clone_object("obj/madonna"); 
     ...
This fails, if "madonna/bedroom" is not loaded. Use something like:
  if (!room || !present("madonna",room)) 
instead.

<to be continued, tell me if you find other problems>
-Deepthought
