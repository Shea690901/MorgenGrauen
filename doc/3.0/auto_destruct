Path: rusmv1!ira.uka.de!sol.ctr.columbia.edu!zaphod.mps.ohio-state.edu!think.com!mintaka!bloom-beacon!eru!hagbard!sunic!chalmers.se!myab!lars
From: lars@myab.se (Lars Pensj|)
Newsgroups: alt.mud.lp
Subject: autodestructing objects in 3.0
Keywords: swapping destruct
Message-ID: <1991Aug3.173117.8181@myab.se>
Date: 3 Aug 91 17:31:17 GMT
References: <mmcg.680577375@dec06.cs.monash.edu.au> <1991Jul29.150440.29383@newcastle.ac.uk> <1991Aug01.054343.28509@ariel.unm.edu>
Organization: Fordonsdata AB
Lines: 31

I'll explain how this is implemented in game driver 3.0. The swapping algorithm
uses a time stamp on all objects, which is examined once every 10 minutes.

If the object has not been touched after a certain time, the function
'clean_up()' will be called in the object.

If the object still remains, and if it is an object that can be swapped,
then it will be swapped.

The drawback of the old swapping method, was that only the program code was
swapped out, and only when the reference count was 1. The object data
(variables and other pointers) were not swapped out (representing
aprox 200 bytes per object). That also means that cloned object were never
swapped out, because the reference count would be greater than 1.

The new system (to call clean_up) has the advantage that it is entirely
voluntarily. However, the local game administrator could make the decision
to add a default 'clean_up()' in room.c. This function should avoid to
destruct the object if there are any objects inside it. If you have an
important room, you will have to redefine the clean_up().

I agree that there will be problems if this is suddenly added to a big
LPmud system. However, I also beleive that the wizards will quickly
check their rooms, and protect sensitive areas.

This system makes it possible to clean up other types of objects, which
are not considered important if they are not used.


Lars Pensj|
lars@cd.chalmers.se

