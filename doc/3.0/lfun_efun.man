void add_action(string fun, string cmd, int flag);

Set up a local function  "fun"  to  be  called  when  user  input
matches  the  command "cmd". Functions called by a player command
will get the arguments as a string. It must then return 0  if  it
was the wrong command, otherwise 1.

If it was the wrong command, the parser will  continue  searching
for another command, until one returns true or give error message
to player.

For example, there can be a wand and a rod. Both of these objects
defines  add_verb("wave").  One  of  them will be randomly called
first, and it must look at the argument, and match against "wand"
or "rod" respectively.

If seconds argument ("cmd") is not give,  it  must  be  given  by
add_verb().  Support of add_verb() is of historical reasons.

Always have add_action() called only from an init() routine.  The
object  that  defines commands must be present to the player, ei-
ther being the player, being carried by  the  player,  being  the
room  around  the  player, or being an object in the same room as
the player.

If argument 'flag' is 1, then only the leading characters of  the
command has to match the verb 'cmd'.

Never define an action that will call the  function  exit(),  be-
cause it is a special function.

See also  efun/query_verb,  efun/add_verb,  lfun/init,  lfun/exit
void add_verb(string str);

This function is connected to  the  "add_action()"  function.  It
will  set  up the command "str" to trigger a call to the function
set up by the previous call to "add_action()".

This function is now obsolete as the verb can be  given  directly
with add_action(). add_verb() remains for compatibility.

See  also  efun/add_action  efun/query_verb  all_inventory(object
ob);

Returns an array of the objects contained  in  the  inventory  of
"ob".

See  also  first_inventory(),   next_inventory().    allocate(int
size);

Allocate an array of 'size' elements. The number of elements must
be >= 0 and not bigger than a system maximum (usually 1000).

See also: efun/sizeof call_other(object  ob,  string  str,  mixed
arg);

Call function in another object  with  an  argument.  The  return
value is returned from the other object.

See also present(),  find_living().   void  call_out(fun,  delay,
arg) string fun; int delay;

Set up a call of function 'fun' in this_object(). The  call  will
take  place in 'delay' seconds, with the argument 'arg' provided.
'arg' can be of any type.

Please note that you can't rely on 'write' or 'say' in the  'fun'
called  since  this_player() is set to 0. Use 'tell_object()' in-
stead.

See   also   efun/remove_call_out    efun/call_out_info    string
capitalize(string str);

Convert the first character in "str" to upper  case,  and  return
the new string.

See also efun/lower_case int  cat(string  path,  int  start,  int
num);

List the file found at "path". It is not legal  to  have  '.'  or
spaces  in  the  path. This commands is normally connected to the
"cat" command that wizards have. It is also used  by  the  "help"
command.  The optional arguments 'start' and 'num' makes is start
line number, and number of lines.  If they  are  not  given,  the
whole file is printed from the beginning.

The total number lines will not exceed a system limit, which nor-
mally is 40 lines.

cat() returns 1 if success, 0 if no such file or no such lines.

See also efun/ls efun/file_size efun/read_file catch(expr)

Evaluate 'expr'. If there is no error, 0 is returned. If there is
a standard error, a string (with a leading '*') will be returned.

The function throw(value) can also be used to immediately  return
any value, except 0. catch() is not really a function call, but a
directive to the compiler.

The catch() is somewhat costly, and should not be used  anywhere.
Rather,  use it at places where an error would destroy consisten-
cy.

See also efun/throw string clear_bit(string str, int n);

Return the new string where bit 'n' is cleared in  string  'str'.
Note that the old string 'str' is not modified.

See also efun/set_bit  efun/test_bit  object  clone_object(string
name);

Load a new object from definition  "name",  and  give  it  a  new
unique  name. Return the new object.  The original used for clon-
ing, should not be used in the game, only used for cloning.

See also efun/destruct efun/move_object int  command(string  str,
object ob);

Execute "str" as a command given directly by the player.  Any ef-
fects  of  the  command will apply to the current object.  If the
second optional argument is present, then the command is executed
for that object.

Return value is 0 for failure. Otherwise, a numeric value is  re-
turned,  which  tells  the  evaluation  cost. Bigger number means
higher cost. The evaluation cost is approximately the  number  of
of machine code instructions executed.

See also efun/enable_commands string create_wizard(string name);

Create the environment and castle for a wizard. Do NOT  use  this
if  you are not sure about what you are doing !  It will create a
new directory for wizard with the name "name", and copy a defini-
tion of a castle to this directory. It will also set up automatic
loading of this castle for the start of the game.

It returns the name of the new castle. In case of error, 0 is re-
turned.  string creator(ob) object ob;

Return as a string the name of the  wizard  that  created  object
'ob'.  If  the object was not created by a wizard, 0 is returned.
string crypt(str, seed);

Crypt the string 'str' using two  characters  from  'seed'  as  a
seed. If

The result has the first two  characters  as  the  seed.   string
ctime(clock) int clock;

Give a nice string with current date and time, with the  argument
'clock' that is the number of seconds since 1970.

See also: efun/time void destruct(ob) object ob;

Completely destroy and remove object "ob". The argument can  also
be  a  string.  After the call to destruct(), no global variables
will exist any longer, only local, and arguments.

If an object self-destructs, it will immediately terminate execu-
tion  and  return  0.  There  is  one exception: If the destruct-
statement is followed by a 'return  1'  immediately  after,  then
this return statement will be executed.

This should NOT be used on normal objects in  the  game,  instead
use the lfun correct update of weights, volumes etc

See also clone_object().  void ed(file) string file;

This is a funny function. It will start a local editor on an  op-
tional   file.   This  editor  is  almost  ed  compatible.   void
enable_commands()

Enable  this  object  to  use  commands  normally  accessible  to
players.   This  also marks the current object as "living".  Com-
mands defined by 'player.c' will not be accessible, of course.

This function must be called if the object  is  supposed  to  in-
teract with other players.

Avoid to call this function from other places then  reset(),  be-
cause the command_giver will be set to the this object.

See also efun/command, efun/living.  object environment(obj)  ob-
ject obj;

Return the surrounding object to "obj". If no argument is giving,
it  returns  the  surrounding  to the current object.  The object
will dissapear silently without any sign.

See also  find_first_inventory(),  this_player(),  this_object().
explode(str, del) string str, del;

Return an array of strings, created  when  the  string  'str'  is
splitted  into substrings as divided by 'del'. The 'str' must end
with 'del' if the last part is wanted too.

Example: explode(str, " ") will split the string  'str'  into  an
array of words as separated by spaces in the original string. The
array is returned.

See   also:   efun/sscanf   efun/extract    efun/sscanf    string
extract(string str, int from, int to)

Extract a substring from a string. Character 0 is  first  charac-
ter.   "extract(str,  n)"  will  return a substring from characer
number 'n' to the end.  "ectract(str, i, j)" will return a string
from character 'i' to character 'j'.

See also efun/sscanf efun/explode string object_name(ob) object ob;

Get the file name of an object. If the object is a cloned object,
then  it  will not have any corresponding file name, but rather a
new name based on the original file name.

Example: "find_object(object_name(ob)) == ob" is guaranteed  to  be
true for all objects 'ob'.  int file_size(file) string file;

Give the size of a file. Size -1 indicates that the  file  either
does  not exist, or that it is not readable by you. Size -2 indi-
cates that it is a directory.

See  also:  efun/save_object   efun/load_object   efun/write_file
efun/cat object find_living(str) string str;

Find first "living" object that answers to the id "str" (by  cal-
ling  local  id()).  A  living  object is an object that has done
"enable_commands()".

The object must have set a name with  'set_living_name()'.  There
is  a special hash table that speeds up the search for living ob-
jects.

See       also       efun/find_player        efun/enable_commands
efun/set_living_name  pointerp  map(arr,  fun,  ob,  extra)
pointerp arr; string fun; object ob;

Returns an array holding the items of 'arr'  mapped  through  ob-
>fun().  The function 'fun' in 'ob' is called for each element in
'arr' with that element as parameter. A second parameter  'extra'
is   sent   in   each   call   if   given.   Principal  function:
        foreach (index) arr[index] = ob->fun(arr[index],extra);

The value returned by ob->fun(arr[.index.], extra)  replaces  the
existing  element  in the array. If 'arr' is not an array, then 0
will be returned.  object find_object(str) string str;

Find an object with the file name 'str'. If the file isn't  load-
ed, it will not be found.  object find_player(str) string str;

Find a player with the name 'str'. The string must be  lowercase.
Players  are  found even if they are invisible or link dead. Mon-
sters are not found.

This function uses the name that was set by  'set_living_name()'.
This is done automatically in player.c.

See    also    efun/find_living    efun/set_living_name    object
first_inventory(ob) object ob;

Get the first object in the inventory of "ob".

See    also    next_inventory(),     all_inventory().      string
function_exists(str, ob) string str; object ob;

Return the file name of the  object  that  defines  the  function
'str'  in  object  'ob'.  The  returned  value  can be other than
object_name(ob) if the function is defined by an inherited object.

0  is  returned  if  the  function  was  not   defined.    string
implode(arr, del)

Concatenate all strings found in array  'arr',  with  the  string
'del' between each element. Only strings are used from the array.

See also: efun/explode void input_to(fun, flag) string  fun;  int
flag;

Enable next line of user input to be sent to the  local  function
"fun" as an argument. The input line will not be parsed.

Note that "fun" is not called immediately. It will not be  called
until  the  current  execution has terminated, and the player has
given a new command.

If input_to() is called more than once  in  the  same  execution,
only the first call has any effect.

If optional argument 'flag' is non-zero, the line  given  by  the
player will not be echoed, and is not seen if snooped.

See also call_other(), sscanf().  int intp(arg)

Return 1 if 'arg' is an integer number.

See also efun/stringp, efun/pointerp, efun/objectp int living(ob)
object ob;

Return  true   if   'ob'   is   a   living   object   (that   is,
enable_commands()  has been called by 'ob').  void log_file(file,
message) string file; string message;

Append a message to a log file. All log files are in the directo-
ry mudlib/log.


See also: efun/write_file string lower_case(str) string str;

Convert the all characters in "str" to lower case, and return the
new string.  void ls(path) char path;

List files in an optional path. It is not allowed to use  '.'  or
space  in  the  path.  This function is normally connected to the
"ls" command that a wiz have.

See also cat().  void move_object(item, dest) object item; object
dest;

Move the object "item" to the object "dest". Currently, both  ar-
guments  can be strings. Usually, 'transfer()' should be used in-
stead of

See also efun/transfer,  efun/first_inventory,  efun/this_object,
         efun/this_player object next_inventory(ob) object ob;

Get next object in the same inventory as "ob".

Warning: If the object  'ob'  is  moved  by  move_object(),  then
next_inventory() will return an object from the new inventory.

See   also   efun/first_inventory,   efun/all_inventory.     void
notify_fail(string str);

Store 'str' as the error message given  instead  of  the  default
message 'What ?'.

If notify_fail() is called more than once, only the last call  of
will be used.

The idea of this function is to give better  error  messages  in-
stead of simply 'What ?'.  int objectp(arg)

Return 1 if 'arg' is an object.

See   also    efun/intp,    efun/stringp,    efun/pointerp    int
parse_command(string  str,  mixed  source,  string pattern, var1,
var2 ...);

Parses commands given in "str" against the pattern  in  "pattern"
and  returns  1 if it matches. "source" is either an object or an
array of objects.  This is essentially a 'hotted' sscanf  and  it
has  a similar syntax, although parse_command works on word basis
where sscanf works on character basis.

Given command Either an array holding the accessible objects,  or
an object from which to recurse and create the list of accessible
objects, normally ob = environment(this_player()) .

Parse pattern as list of words and formats:
                Syntax:
                        'word'          obligatory text (One word)
                        [word]          optional text (One word)
                        /               Alternative marker
                        %o              Single item, object
                        %l              Single living object
                        %s              Any text (multiple words)
                        %w              Any word
                        %p              Preposition
                        %i              Any items
                        %d              Number 0- or tx(0-99)
Example string: " 'get' / 'take' %i " .  Items as in  %o  and  %i
can on many forms, some examples:
                        apple, two apples, twentyfirst apple
                        apples, all apples, all green apples, all green ones

This is the list of result variables as in sscanf.  One  variable
is needed for each %_.  The return types of different %_ is:
        %o      Returns an object
        %l      Returns an object
        %s      Returns a string of words
        %w      Returns a string of one word
        %p      Can on entry hold a list of word in array
                or an empty variable
                Returns:
                   if empty variable: a string
                   if array: array[0]=matched word
        %i      Returns a special array on the form:
                [0] = (int) given numeric prefix
                       =0: all or a pluralform given
                       >0: numeral given: two, three, four...
                       <0: order given: second, third ...
                [1..n] (object) Objectpointers
                       A list of the POSSIBLE objects that can match
                       the given %i. No choosing of third or such.
        %d      Returns a number
Example:

a=parse_command("take apple",environment(this_player()),
" 'get' / 'take' %i ",items);

void people()

A function that will list all interactive players, and some  info
about  them.  This function is normally connected to the "people"
command, that wizards have.

THIS FUNCTION IS OBSOLETE. LOOK  AT  efun/users()  INSTEAD.   int
pointerp(arg)

Return 1 if 'arg' is a string.

See   also   efun/intp,   efun/stringp,    efun/objectp    object
present(str, ob) string str; object ob;

If an object that identifies to the name "str" is  present,  then
return it.


The object is searched for in the inventory of  the  current  ob-
ject,  and in the inventory of the environment of the current ob-
ject.

A second optional argument  'ob'  is  the  enviroment  where  the
search for the

See   also   efun/move_object(),   efun/environment().     object
previous_object()

Returns an object pointer to the object that called current func-
tion, if any.

See also: efun/call_other int query_idle(ob) object ob;

Query how many seconds idle a player  object  has  been.   string
query_verb()

Give the name of the current command, or 0 if not executing  from
a  command.  This enables add_action() of several commands to teh
same function.

See also efun/add_action().  int random(n) int n;

Return  a  number  in  the  random  range  [0   ..   n-1].    int
remove_call_out(fun) string fun;

Remove next pending call out for function 'fun' in  this  object.
The time left is returned.

-1 is returned if there were no call out pending  to  this  func-
tion.

See also efun/call_out efun/call_out_info void  save_object(name)
string name;

Save values of variables of this object in the file  "name".   It
is  illegal  to have '.' or space in the field name. Wizards that
call this function can only save to files  in  their  own  direc-
tories.

Objectpointers are stored as the number '0'.  Variables that  has
the type modifer 'static' will not be saved. Example: 'static int
xxx;'.

See  also  efun/restore_object  int  restore_object(name)  string
name;

Restore values of variables for current object from file  "name".
It  is illegal to have '.' or spaces in the name.  Return true if
success.

Variables that has the type modifer 'static' will not  be  saved.
Example: 'static int xxx;'.

See also efun/save_object void say(str) string str;

void say(str,obj) string str; object obj;

Send a message "str" to all players in the  same  object  (room).
This function is also used by the "say" command.

If second argumnet "obj" specified, messages is semt to  all  ex-
cept "obj".

This commands behaves differently if called from a  heart_beat(),
or  otherwise.  When called from a heart_beat(), the message will
reach all players in the same  environment  of  the  object  that
calls say().

See also write(), shout(), tell().  string set_bit(str, n) string
str; int n;

Return the new string where bit 'n' is set in string 'str'.  Note
that the old string 'str' is not modified.

The max value of 'n' is limited. Ask  the  administrator  if  you
want to now the maximum value.

The new string will automatically be extended if needed.

Bits are packed 6 per byte in printable strings.

See also efun/clear_bit  efun/test_bit  int  set_heart_beat(flag)
int flag;

Enable or disable heart beat. If the heart beat is not needed for
the  moment,  then  do  disable  it. This will reduce system over
head.

Return true for success, and false for failure. Specifically,  it
will  fail if the heart beat function has been disabled, which it
will be if there is a run time error in it.

See also lfun/heart_beat int set_light(n) int n;

An object is by default dark. It can be set to not dark  by  cal-
ling  set_light(1). The environment will the also get this light.
The returned value is the total number of lights in this room.

Note that the value of the argument is added to the light of  the
current argument !  void set_living_name(name) string name;

Set a living name on an object that must be living. When this  is
done, the object can be found with find_living().

An object can only have one name that can be  searched  for  with
find_living().

See also efun/find_living efun/find_player void shout(str) string
str;

Send a string "str" to all players. This function is also used by
the "shout" command.

See also write(), tell_object(), say().

int sizeof(arr)

Return the number of arguments of an array 'arr'.   If  'arr'  is
not an array, then '0' is returned.

See also: efun/allocate slice_array(arr,from,to) array  arr;  int
from; int to;

Returns an array that is a slice of the array 'arr' from the  in-
dex 'from' to the index 'to'. Indexes are numbered 0-

If 'arr' is not an array or indexes are  outside  the  limits  of
'arr', then 0 will be returned.

Note also that you can use the operator '+' on arrays.

int sscanf(str, fmt, var1, var2 ...) string str; string fmt;

Parse a string "str" using the format "fmt".  "fmt"  can  contain
strings   separated  by  "%d"  and  "%s".  Every  "%d"  and  "%s"
corresponds to one of var1, var2...  "%d" will give a number, and
"%s" will give a string.

Number of matched "%d" and "%s" is returned.

See also efun/extract efun/explode.  int stringp(arg)

Return 1 if 'arg' is a string.

See   also   efun/intp,    efun/pointerp,    efun/objectp    void
tell_object(ob, str) object ob; string str;

Send a message "str" to object "ob". If it is an interactive  ob-
ject  (a  player),  then the message will go to him, otherwise it
will go to the local function "catch_tell".

See also write(), shout(), say().  void tell_room(ob, str) object
ob; string str;

Send a message "str" to object all objects in the room "ob".

See also efun/write, efun/shout, efun/say,  efun/tell_object  int
test_bit(str, n) string str; int n;

Return 0 or 1 of bit 'n' was set in string 'str'.

See also: efun/set_bit efun/clear_bit object this_object()

Return the object pointer of this object. This is not to be  con-
fused  with  the internal name of an object, which is used by the
"id()" function.

See also: this_player().  object this_player()

Return the object representing the current player.

See also: this_object().  int time()

Return number of seconds since 1970.

See also: efun/ctime string getuid(object ob)

Get the name of the wizard that is set to the user  of  this  ob-
ject.  That name is also the name used in the wizlist.

See also efun/seteuid users()

Return an array of objects, containing all  interactive  players.
void write(str) string str;

Write a message "str" to current player.  "str"  can  also  be  a
number, which will be translated to a string.

See also: say(), tell_object(),  shout().   int  write_file(file,
str) string file, str;

Append the string 'str' into the file 'file'. Returns 0 or 1  for
failure or success.

See also: efun/file_size  efun/cat  efun/log_file  int  rm(string
file)

Remove file 'file'. Returns 0 for failure and 1 for success.

See also efun/mkdir efun/rmdir pointerp filter(mixed  *arr,
string fun, object ob, mixed extra);

Returns an array holding the items of 'arr' filtered through  ob-
>fun().  The function 'fun' in 'ob' is called for each element in
'arr' with that element as parameter. A second parameter  'extra'
is  sent  in  each call if given. If ob->fun(arr[.index.], extra)
returns 1 the element is included in the returned array.

If 'arr' is not an array, then  0  will  be  returned.   pointerp
unique_array(obarr,separator) pointerp obarr; string separator;

Groups objects together for which the  'separator'  function  re-
turns the same value. 'obarr' should be an array of objects, oth-
er types are ignored.  The 'separator' function  is  called  only
once  in  each object in 'obarr'. The return value is an array of
arrays of objects on the form:

   ({
       ({Same1:1, Same1:2, Same1:3, .... Same1:N }),
       ({Same2:1, Same2:2, Same2:3, .... Same2:N }),
       ({Same3:1, Same3:2, Same3:3, .... Same3:N }),
                     ....
                     ....
       ({SameM:1, SameM:2, SameM:3, .... SameM:N }),
   })

int export_uid(object ob)

Set the uid of object 'ob' to this_object's effective uid. It  is
only possible when object 'ob' has an effective uid of 0.

See also efun/seteuid efun/getuid int seteuid(string str)

Set effective uid to 'str'. It is not possible to set it  to  any
string.   It  can  always  be set to getuid(), the creator of the
file for this object or 0.

When this value is 0, then current objects uid can be changed  by
export_uid, and only then.

But, when the value is 0, no objects can be loaded or  cloned  by
this object.

See also efun/export_uid efun/getuid mixed *call_out_info()

Get information about all pending call  outs.  An  array  is  re-
turned, where every item in the array consists 4 elements:

The object.  The function.  The delay to go.  The optional  argu-
ment.

See    also:    efun/call_out     efun/remove_call_out     string
read_file(string file);

Return the contents of the file 'file'. There is a maximum limit.

See also: efun/file_size efun/cat  efun/log_file  efun/write_file
void throw(mixed val);

Terminate execution, and make the currently  executing  'catch()'
return 'val'.

See also efun/catch int move(object dest);

Move the object to the object "dest".  All  kinds  of  tests  are
done, and a number is returned specifying the result:

0: Success.
1: To heavy for destination.
2: Can't be dropped.
3: Can't take it out of it's container.
4: The object can't be inserted into bags etc.
5: The destination doesn't allow insertions of objects.
6: The object can't be picked up.

If an object is transfered to a newly created object,  make  sure
that the new object first is moved to it's destination.





























