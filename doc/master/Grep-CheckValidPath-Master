backend.c:    file = check_valid_path(file, current_object, "write_file", 1);
backend.c:    file = check_valid_path(file, current_object, "read_file", 0);
backend.c:    file = check_valid_path(file, current_object, "read_bytes", 0);
backend.c:    file = check_valid_path(file, current_object, "write_bytes", 1);
backend.c:    file = check_valid_path(file, current_object, "file_size", 0);
ed.c:    file2 = check_valid_path(file, command_giver, "ed_start", writeflg);
ed.c:	new_path = check_valid_path(file_arg, command_giver, "ed_start", 0);
interpret.c:	path = check_valid_path(sp->u.string, current_object, "mkdir", 1);
interpret.c:	path = check_valid_path(sp->u.string, current_object, "rmdir", 1);
interpret.c:    path = check_valid_path(sp->u.string, current_object, "cindent", 1);
lint.h:char *check_valid_path PROT((char *, struct object *, char *, int));
object.c:    file = check_valid_path(file, ob, "save_object", 1);
object.c:    file = check_valid_path(file, ob, "restore_object", 0);
simulate.c:    path = check_valid_path(path, current_object, "get_dir", 0);
simulate.c:    path = check_valid_path(path, current_object, "tail", 0);
simulate.c:    path = check_valid_path(path, current_object, "print_file", 0);
simulate.c:    path = check_valid_path(path, current_object, "remove_file", 1);
simulate.c:char *check_valid_path(path, caller, call_fun, writeflg)
simulate.c:    from = check_valid_path(fr, current_object, "do_rename", 1);
simulate.c:    to = check_valid_path(t, current_object, "do_rename", 1);
