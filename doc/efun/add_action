add_action(E)
FUNKTION:
     void add_action(string fun, string cmd)
     void add_action(string fun, string cmd, int flag)

ARGUMENTE:
     fun
	gerufene Methode
     cmd
	ausloesendes Verb
     flag
	Flag fuer unscharfe Interpretation

BESCHREIBUNG:
     Generell: Das Verhalten dieser efun wird durch AddCmd aus
               /std/thing/commands.c komfortabler widergespiegelt.
               Darauf sollte man zurueckgreifen.

     Legt fuer "cmd" (ein Kommandoverb) eine im entsprechenden Objekt
     zu rufende Methode fest.

     Diese Methode bekommt die Argumente als String uebergeben und
     muss 0 (fuer einen Fehler) oder 1 (fuer Erfolg) zurueckgeben.

     Der Parser durchsucht bei einer Spielereingabe die Liste der
     eingetragenen Kommandos nach passenden Kommandos und ruft die
     zugehoerigen Methoden in den Objekten bis eine der Methoden
     1 zurueckgibt oder die Liste durchlaufen wurde. In dem Fall
     kommt die Fehlermeldung (notify_fail()) zum Einsatz.

     Mit dem Wert 1 fuer "flag" legt man eine unscharfe Auswertung
     fest, im Beispiel: Die Methode "action_fun" bei einem
      add_action("action_fun", "hops", 1);
     wird sowohl beim Kommando "hops" als auch bei Kommandos wie
     "hopse", "hopseblub", ... gerufen werden.
     Dieses Flag sollte vorsichtig verwendet werden.

BEMERKUNGEN:
     (1) add_action() sollte immer innerhalb von init() benutzt werden
     (2) das definierende Objekt muss im inventory des Spielers oder
         environment() des kommandogebenden Lebewesens sein
     (3) im init() spaeter eingetragene Kommandos oder spaeter hinzu-
         kommende Objekte werden bei der Kommandoauswertung VOR den
         alten beruecksichtigt
         (Daher bewegt sich das Xtool der Magier regelmaessing neu in
          das Inventory, um immer "erstes" Objekt zu sein.)

BEISPIELE:
     // ein Kommando in einem Schirm
     void init() {
      ::init();
      add_action("action_oeffne", "oeffne");
     }

     int action_oeffne(string str) {
      if(stringp(str) && id(str))	// Argument da und bin ich gemeint?
       write("Du oeffnest den Schirm.\n");
       say(break_string(this_player()->Name(WER)+" oeffnet einen Schirm.",78));
       return 1;
      }
      notify_fail("Was willst Du oeffnen?\n");
      return 0;
     }


     // frueher beliebt um Spieler lahmzulegen, da es _alle_ Kommandos 
     // triggert -> siehe heute jedoch dafuer eher P_DISABLE_COMMANDS
     // Achtung: siehe Implikation von (3)
     add_action("action_nothing", "",1 );
     ...
     int action_nothing(string str) {
      write("Dir sind die Haende gebunden.\n");
      return 1;
     }

SIEHE AUCH:
			remove_action(E), init(E), enable_commands(E)
     Fehlermeldung:	notify_fail(E), _notify_fail(E)
     Argumentstring:	query_verb(E), _unparsed_args(L)
     obsolet:		add_verb(E), add_xverb(E)
     alternativ:	AddAction(L), AddCmd(L)
                        P_DISABLE_COMMANDS

24. Maerz 2004 Gloinson@MG
